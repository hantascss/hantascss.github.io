I"
M<div class="container"><section class="header">
  <h2 class="title">基于 CSS 逻辑属性构建的下一代 CSS 应用。</h2>

  <div class="row">
    <div class="four columns">
      <img class="value-img" src="/assets/images/feather.svg" /> 约550行代码 &amp; 为移动设备而生
    </div>
    <div class="four columns value-prop">
      <img class="value-img" src="/assets/images/pens.svg" /> 始于设计，而非 UI 框架
    </div>
    <div class="four columns value-prop">
      <img class="value-img" src="/assets/images/watch.svg" /> 不需编译、安装，开箱即用
    </div>
  </div>

  <div class="row">
  <br /><br /><br />
    <a class="button button-primary" href="">下载试用 Hantas</a>
  </div>

</section>
<div class="docs-section" id="intro">
      <h6 class="docs-header">Is Skeleton Framework for you?</h6>
      <p>You should use Skeleton Framework if you're embarking on a smaller project or just don't feel like you need all the utility of larger frameworks. Skeleton only styles a handful of standard HTML elements and includes a grid, but that's often more than enough to get started. In fact, <u>this site is built on Skeleton Framework and has ~200 lines of custom CSS</u> (half of which is the docking navigation).</p>
    </div>

    <div class="docs-section" id="grid">
      <h6 class="docs-header">The grid</h6>
      <p>The grid is a <u>12-column fluid grid with a max width of 1200px</u>, that shrinks with the browser/device at smaller sizes. The max width can be changed with one line of CSS and all columns will resize accordingly. The syntax is simple and it makes coding responsive much easier. Go ahead, resize the browser. </p>
      <div class="example-grid docs-example">
        <div class="row">
          <div class="one column">One</div>
          <div class="eleven columns">Eleven</div>
        </div>
        <div class="row">
          <div class="two columns">Two</div>
          <div class="ten columns">Ten</div>
        </div>
        <div class="row">
          <div class="three columns">Three</div>
          <div class="nine columns">Nine</div>
        </div>
        <div class="row">
          <div class="four columns">Four</div>
          <div class="eight columns">Eight</div>
        </div>
        <div class="row">
          <div class="five columns">Five</div>
          <div class="seven columns">Seven</div>
        </div>
        <div class="row">
          <div class="six columns">Six</div>
          <div class="six columns">Six</div>
        </div>
        <div class="row">
          <div class="seven columns">Seven</div>
          <div class="five columns">Five</div>
        </div>
        <div class="row">
          <div class="eight columns">Eight</div>
          <div class="four columns">Four</div>
        </div>
        <div class="row">
          <div class="nine columns">Nine</div>
          <div class="three columns">Three</div>
        </div>
        <div class="row">
          <div class="ten columns">Ten</div>
          <div class="two columns">Two</div>
        </div>
        <div class="row">
          <div class="eleven columns">Eleven</div>
          <div class="one column">One</div>
        </div>
        <div class="row">
          <div class="six columns">six</div>
          <div class="six columns">six</div>
        </div>
        <div class="row">
          <div class="four columns">four</div>
          <div class="four columns">four</div>
          <div class="four columns">four</div>
        </div>
        <div class="row">
          <div class="three columns">three</div>
          <div class="three columns">three</div>
          <div class="three columns">three</div>
          <div class="three columns">three</div>
        </div>
        <div class="row">
          <div class="two columns">two</div>
          <div class="eight columns">eight</div>
          <div class="two columns">two</div>
        </div>
        <div class="row">
          <div class="one-third column">⅓</div>
          <div class="two-thirds column">⅔</div>
        </div>
        <div class="row">
          <div class="one-half column">½</div>
          <div class="one-half column">½</div>
        </div>
        <div class="row">
          <div class="one-quarter column">¼</div>
          <div class="one-quarter columns">¼</div>
          <div class="one-quarter column">¼</div>
          <div class="one-quarter column">¼</div>
        </div>
      </div>

      <pre class="code-example">
<code class="code-example-body prettyprint">
<div class="container">


  <div class="row">
    <div class="one column">One</div>
    <div class="eleven columns">Eleven</div>
  </div>


  <div class="row">
    <div class="two columns">Two</div>
    <div class="ten columns">Ten</div>
  </div>


  <div class="row">
    <div class="one-third column">⅓</div>
    <div class="two-thirds column">⅔</div>
  </div>
  <div class="row">
    <div class="one-half column">½</div>
    <div class="one-half column">½</div>
  </div>

</div>


</code>
</pre>

    </div>

    <div class="docs-section" id="typography">
      <h6 class="docs-header">Typography</h6>
      <p>Type is all set with the <code>rems</code>, so font-sizes and spacial relationships can be responsively sized based on a single <code>&lt;html&gt;</code> font-size property. Out of the box, Skeleton Framework never changes the <code>&lt;html&gt;</code> font-size, but it's there in case you need it for your project. All measurements are still base 10 though so, an <code>&lt;h1&gt;</code> with <code>5.0rem</code>font-size just means <code>50px</code>.</p>
      <div class="docs-example">
        <div class="row">
          <div class="six columns">
            <p><strong>The typography base</strong> is <a href="http://www.google.com/fonts/specimen/Raleway">Raleway</a> served by Google, set at 1.5rem (15px) over a 1.6 line height (24px). Other type basics like <a href="#">anchors</a>, <strong>strong</strong>, <em>emphasis</em>, and <u>underline</u> are all obviously included.</p>
            <p><strong>Headings</strong> create a family of distinct sizes each with specific <code>letter-spacing</code>, <code>line-height</code>, and <code>margins</code>.</p>
          </div>
          <div class="six columns">
            <h1>Heading<span class="heading-font-size"> <code>&lt;h1&gt;</code> 5.0rem</span></h1>
            <h2>Heading<span class="heading-font-size"> <code>&lt;h2&gt;</code> 4.2rem</span></h2>
            <h3>Heading<span class="heading-font-size"> <code>&lt;h3&gt;</code> 3.6rem</span></h3>
            <h4>Heading<span class="heading-font-size"> <code>&lt;h4&gt;</code> 3.0rem</span></h4>
            <h5>Heading<span class="heading-font-size"> <code>&lt;h5&gt;</code> 2.4rem</span></h5>
            <h6>Heading<span class="heading-font-size"> <code>&lt;h6&gt;</code> 1.5rem</span></h6>
          </div>
        </div>
      </div>

      <pre class="code-example">
<code class="code-example-body prettyprint">
<h1>Heading</h1>
<h2>Heading</h2>
<h3>Heading</h3>
<h4>Heading</h4>
<h5>Heading</h5>
<h6>Heading</h6>


<p>The base type is 15px over 1.6 line height (24px)</p>


<strong>Bolded</strong>
<em>Italicized</em>
<a>Colored</a>
<u>Underlined</u>
</code>
</pre>

    </div>

    <div class="docs-section" id="buttons">
      <h6 class="docs-header">Buttons</h6>
      <p>Buttons come in two basic flavors in Skeleton Framework. The standard <code>&lt;button&gt;</code> element is plain, whereas the <code>.button-primary</code> button is vibrant and prominent. Button styles are applied to a number of appropriate form elements, but can also be arbitrarily attached to anchors with a <code>.button</code> class.</p>
      <div class="docs-example">
        <div>
          <a class="button" href="#">Anchor button</a>
          <button>Button element</button>
          <input type="submit" value="submit input" />
          <input type="button" value="button input" />
        </div>
        <div>
          <a class="button button-primary" href="#">Anchor button</a>
          <button class="button-primary">Button element</button>
          <input class="button-primary" type="submit" value="submit input" />
          <input class="button-primary" type="button" value="button input" />
        </div>
      </div>

      <pre class="code-example">
<code class="code-example-body prettyprint">
<a class="button" href="#">Anchor button</a>
<button>Button element</button>
<input type="submit" value="submit input" />
<input type="button" value="button input" />


<a class="button button-primary" href="#">Anchor button</a>
<button class="button-primary">Button element</button>
<input class="button-primary" type="submit" value="submit input" />
<input class="button-primary" type="button" value="button input" />
</code>
</pre>

    </div>

    <div class="docs-section" id="forms">
      <h6 class="docs-header">Forms</h6>
      <p>Forms are a huge pain, but hopefully these styles make it a bit easier. All inputs, select, and buttons are normalized for a common height cross-browser so inputs can be stacked or placed alongside each other.</p>
      <div class="docs-example docs-example-forms">
        <form>
          <div class="row">
            <div class="six columns">
              <label for="exampleEmailInput">Your email</label>
              <input class="u-full-width" type="email" placeholder="test@mailbox.com" id="exampleEmailInput" />
            </div>
            <div class="six columns">
              <label for="exampleRecipientInput">Reason for contacting</label>
              <select class="u-full-width" id="exampleRecipientInput">
                <option value="Option 1">Questions</option>
                <option value="Option 2">Admiration</option>
                <option value="Option 3">Can I get your number?</option>
              </select>
            </div>
          </div>
          <label for="exampleMessage">Message</label>
          <textarea class="u-full-width" placeholder="Hey guys &hellip;" id="exampleMessage"></textarea>
          <label class="example-send-yourself-copy">
            <input type="checkbox" />
            <span class="label-body">Send a copy to yourself</span>
          </label>
          <input class="button-primary" type="submit" value="Submit" />
        </form>
      </div>

      <pre class="code-example">
<code class="code-example-body prettyprint">
<form>
  <div class="row">
    <div class="six columns">
      <label for="exampleEmailInput">Your email</label>
      <input class="u-full-width" type="email" placeholder="test@mailbox.com" id="exampleEmailInput" />
    </div>
    <div class="six columns">
      <label for="exampleRecipientInput">Reason for contacting</label>
      <select class="u-full-width" id="exampleRecipientInput">
        <option value="Option 1">Questions</option>
        <option value="Option 2">Admiration</option>
        <option value="Option 3">Can I get your number?</option>
      </select>
    </div>
  </div>
  <label for="exampleMessage">Message</label>
  <textarea class="u-full-width" placeholder="Hey guys &hellip;" id="exampleMessage"></textarea>
  <label class="example-send-yourself-copy">
    <input type="checkbox" />
    <span class="label-body">Send a copy to yourself</span>
  </label>
  <input class="button-primary" type="submit" value="Submit" />
</form>




</code>
</pre>

    </div>

    <div class="docs-section" id="lists">
      <h6 class="docs-header">Lists</h6>
      <div class="row docs-example">
        <div class="six columns">
          <ul>
            <li>Unordered lists have basic styles</li>
            <li>
              They use the circle list style
              <ul>
                <li>Nested lists styled to feel right</li>
                <li>Can nest either type of list into the other</li>
              </ul>
            </li>
            <li>Just more list items mama san</li>
          </ul>
        </div>
        <div class="six columns">
          <ol>
            <li>Ordered lists also have basic styles</li>
            <li>
              They use the decimal list style
              <ul>
                <li>Ordered and unordered can be nested</li>
                <li>Can nest either type of list into the other</li>
              </ul>
            </li>
            <li>Last list item just for the fun</li>
          </ol>
        </div>
      </div>

      <pre class="code-example">
<code class="code-example-body prettyprint"><ul>
  <li>Item 1</li>
  <li>
    Item 2
    <ul>
      <li>Item 2.1</li>
      <li>Item 2.2</li>
    </ul>
  </li>
  <li>Item 3</li>
</ul>


</code>
</pre>

    </div>

    <div class="docs-section" id="code">
      <h6 class="docs-header">Code</h6>
      <p>Code styling is kept basic – just wrap anything in a <code>&lt;code&gt;</code> and it will appear like <code>this</code>. For blocks of code, wrap a <code>&lt;code&gt;</code> with a <code>&lt;pre&gt;</code>.</p>
      <div class="docs-example">
        <pre><code>.some-class {
  background-color: red;
}</code></pre>
      </div>


      <pre class="code-example">
<code class="code-example-body prettyprint"><pre><code>.some-class {
  background-color: red;
}</code></pre>


      </code>
      </pre>

    </div>

    <div class="docs-section" id="tables">
      <h6 class="docs-header">Tables</h6>
      <p>Be sure to use properly formed table markup with <code>&lt;thead&gt;</code> and <code>&lt;tbody&gt;</code> when building a <code>table</code>.</p>
      <div class="docs-example">
        <table class="u-full-width">
          <thead>
            <tr>
              <th>Name</th>
              <th>Age</th>
              <th>Sex</th>
              <th>Location</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Dave Gamache</td>
              <td>26</td>
              <td>Male</td>
              <td>San Francisco</td>
            </tr>
            <tr>
              <td>Dwayne Johnson</td>
              <td>42</td>
              <td>Male</td>
              <td>Hayward</td>
            </tr>
          </tbody>
        </table>
      </div>

      <pre class="code-example">
<code class="code-example-body prettyprint"><table class="u-full-width">
  <thead>
    <tr>
      <th>Name</th>
      <th>Age</th>
      <th>Sex</th>
      <th>Location</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Dave Gamache</td>
      <td>26</td>
      <td>Male</td>
      <td>San Francisco</td>
    </tr>
    <tr>
      <td>Dwayne Johnson</td>
      <td>42</td>
      <td>Male</td>
      <td>Hayward</td>
    </tr>
  </tbody>
</table>
</code>
</pre>

    </div>

    <div class="docs-section" id="queries">
      <h6 class="docs-header">Media queries</h6>
      <p>Skeleton Framework uses media queries to serve its scalable grid, but also has a list of queries for convenience of styling your site across devices. The queries are mobile-first, meaning they target <code>min-width</code>. Mobile-first queries are how Skeleton's grid is built and is the preferrable method of organizing CSS. It means all styles outside of a query apply to all devices, then larger devices are targeted for enhancement. This prevents small devices from having to parse tons of unused CSS. The sizes for the queries are:</p>
      <div class="docs-example row">
        <div class="six columns">
          <ul>
            <li><strong>Desktop HD</strong>: 1200px</li>
            <li><strong>Desktop</strong>: 1000px</li>
            <li><strong>Tablet</strong>: 750px</li>
          </ul>
        </div>
        <div class="six columns">
          <ul>
            <li><strong>Phablet</strong>: 550px</li>
            <li><strong>Mobile</strong>: 400px</li>
          </ul>
        </div>
      </div>

      <pre class="code-example">
<code class="code-example-body prettyprint">/* Mobile first queries */

/* Larger than mobile */
@media (min-width: 400px) {}

/* Larger than phablet */
@media (min-width: 550px) {}

/* Larger than tablet */
@media (min-width: 750px) {}

/* Larger than desktop */
@media (min-width: 1000px) {}

/* Larger than Desktop HD */
@media (min-width: 1200px) {}

</code>
</pre>

    </div>

    <div class="docs-section" id="utilities">
      <h6 class="docs-header">Utilities</h6>
      <p>Skeleton Framework has a number of small utility classes that act as easy-to-use helpers. Sometimes it's better to use a utility class than create a whole new class just to float an element.</p>

      <pre class="code-example">
<code class="code-example-body prettyprint">

/* Utilities
–––––––––––––––––––––––––––––––––––––––––––––––––– */
.u-full-width {
  width: 100%; }

.u-max-full-width {
  max-width: 100%; }

/* Floats */
.u-pull-right {
  float: right; }

.u-pull-left {
  float: left; }

.u-cf {
  content: "";
  display: table;
  clear: both; }

/* Positioning */
.u-center-block {
  display: block;
  margin-left: auto;
  margin-right: auto; }

/**
 * Note:
 *
 * Nest this class inside something with `position: relative` to have
 * your element centered relative to its containing element.
 *
 * Use this class without nesting it to have your element centered relative
 * to the viewport.
 */
.u-center-abs {
  position: absolute;
  top: 50%;
  left: 50%;
  -webkit-transform: translateY(-50%) translateX(-50%);
      -ms-transform: translateY(-50%) translateX(-50%);
          transform: translateY(-50%) translateX(-50%); }

/* Type */
.u-text-center {
  text-align: center !important; }

.u-text-right {
  text-align: right !important; }

.u-text-hide {
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0; }

/* Peek a boo */
.u-hide {
  display: none !important; }

.u-show {
  display: block !important; }

.u-invisible {
  visibility: hidden !important; }

.u-visible {
  visibility: visible !important; }

/* Misc */
.u-img-responsive {
  display: block;
  max-width: 100%;
  height: auto; }

</code>
</pre>

    </div>

    <div class="docs-section examples" id="examples">
      <h6 class="docs-header">Examples</h6>
      <div class="row example">
        <a class="example-screenshot-wrapper" target="_blank" href="landing">
          <img class="example-screenshot" src="/assets/images/landing.jpg" />
        </a>
        <div class="one-half offset-by-one-half column">
          <h6 class="example-header">Demo Landing Page</h6>
          <p class="example-description">This template is an example of how easy it can be to create a landing page with just the Skeleton grid and a few custom styles. The entire demo is ~150 lines of CSS including comments (most of which is positioning the phones at the top).</p>
          <a class="button" href="landing" target="_blank">Demo</a>
          <a class="button" href="https://github.com/SkeletonFramework/skeletonframework.github.io/tree/master/landing" target="_blank">Source</a>
        </div>
      </div>
      <div class="row example">
        <div class="example-screenshot-wrapper">
          <div class="example-screenshot coming-soon"></div>
        </div>
        <div class="one-half offset-by-one-half column">
          <h6 class="example-header">More Coming Soon!</h6>
          <p class="example-description">More examples will be added to help anyone get started or more familiar with how the Skeleton Framework works. The goal is education. If you're more interested in real, live examples of Skeleton sites, we'll be creating a "Built with the Skeleton Framework" list soon!</p>
        </div>
      </div>
    </div>
  </div>

:ET